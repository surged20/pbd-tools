name: Module CI/CD

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '18.x'

      - name: Install
        run: npm install && npm ci

      - name: "Make output folder"
        run: mkdir dist

      - name: Extract tag version number
        id: get_version
        uses: battila7/get-version-action@v2

      # Substitute tag version in manifest
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: "static/module.json"
        env:
          version: ${{ steps.get_version.outputs.version-without-v }}
          url: https://github.com/${{ github.repository }}
          manifest: https://github.com/${{ github.repository }}/releases/latest/download/module.json
          download: https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/module.zip

      - name: Build
        run: npm run build

      # create a zip file with all files required by the module to add to the release
      - name: Zip Files
        working-directory: ./dist
        run: zip -r ./module.zip ./*

      # Get the annotated tag message
      - name: Get tag message
        id: get_tag_message
        run: echo "content=$(git tag -l --format='%(contents:subject)' ${{ steps.get_version.outputs.version }})" >> $GITHUB_OUTPUT

      # Create a release for this specific version
      - name: Create Release
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # set this to false if you want to prevent updating existing releases
          name: ${{ steps.get_version.outputs.version-without-v }}
          body: ${{ steps.get_tag_message.content }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './dist/module.json,./dist/module.zip'
          tag: ${{ steps.get_version.outputs.version }}

      # Update the 'latest' release
      - name: Create Release
        id: create_latest_release
        uses: ncipollo/release-action@v1
        if: endsWith(github.ref, 'master')
        with:
          allowUpdates: true
          name: Latest
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './dist/module.json,./dist/module.zip'
          tag: latest
