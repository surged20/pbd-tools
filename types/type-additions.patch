diff --git a/types/foundry/client/pixi/board.d.ts b/types/foundry/client/pixi/board.d.ts
--- a/types/foundry/client/pixi/board.d.ts	(revision 274df0e694162065298f930be954f464e2376cbb)
+++ b/types/foundry/client/pixi/board.d.ts	(revision 3e52143c7cc1b18e5207339ddda461975953f2d5)
@@ -313,7 +313,7 @@
          * @param origin  Point to display Ping at
          * @param options Additional options to configure how the ping is drawn.
          */
-        ping(origin: Point, options: Record<string, unknown>): Promise<boolean>;
+        ping(origin: Point, options?: Record<string, unknown>): Promise<boolean>;

         /**
          * Create a BlurFilter instance and register it to the array for updates when the zoom level changes.
Index: types/foundry/client/pixi/canvas-layer/grid-layer.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts b/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts
--- a/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts	(revision 274df0e694162065298f930be954f464e2376cbb)
+++ b/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts	(revision 3e52143c7cc1b18e5207339ddda461975953f2d5)
@@ -30,7 +30,7 @@
          * Draw the grid
          * @param preview Override settings used in place of those saved to the Scene data
          */
-        protected _draw({ type, dimensions, gridColor, gridAlpha }?: GridDrawOptions): Promise<void>;
+        protected _draw({type, dimensions, gridColor, gridAlpha}?: GridDrawOptions): Promise<void>;

         /**
          * Given a pair of coordinates (x1,y1), return the grid coordinates (x2,y2) which represent the snapped position
@@ -56,22 +56,24 @@
          * Measure the grid-wise distance between two point coordinates.
          * @param origin The origin point
          * @param target The target point
+         * @param options Additional options which modify the measurement
          * @return The measured distance between these points
          *
          * @example
          * let distance = canvas.grid.measureDistance({x: 1000, y: 1000}, {x: 2000, y: 2000});
          */
-        measureDistance(origin: Point, target: Point): number;
+        measureDistance(origin: Point, target: Point, options?: MeasureDistancesOptions): number;

         /**
          * Measure the distance traveled over an array of distance segments.
          * @param segments An array of measured segments
          * @param options  Additional options which modify the measurement
          */
-        measureDistances(segments: Segment[], options?: Record<string, unknown>): number[];
+        measureDistances(segments: Segment[], options?: MeasureDistancesOptions): number[];

         /* -------------------------------------------- */
         /*  Grid Highlighting Methods                   */
+
         /* -------------------------------------------- */

         /**
@@ -121,6 +123,11 @@
         gridColor?: string | null;
         gridAlpha?: number | null;
     }
+
+    interface MeasureDistancesOptions {
+        /** Return the distance in grid increments rather than the co-ordinate distance. */
+        gridSpaces?: boolean;
+    }
 }

 interface GridLayerOptions extends CanvasLayerOptions {
Index: types/foundry/common/primitives/set.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/types/foundry/common/primitives/set.d.ts b/types/foundry/common/primitives/set.d.ts
--- a/types/foundry/common/primitives/set.d.ts	(revision 274df0e694162065298f930be954f464e2376cbb)
+++ b/types/foundry/common/primitives/set.d.ts	(revision 3e52143c7cc1b18e5207339ddda461975953f2d5)
@@ -72,8 +72,8 @@
      * the index of iteration, and the set being tested.
      * @returns {boolean}  Does every element in the set satisfy the test criterion?
      */
-    every<U extends T = T>(test: (value: T) => value is U): this is Set<U>;
-    every(test: (value: T) => boolean): boolean;
+    every<U extends T = T>(test: (value: T, index: number, set: Set<T>) => value is U): this is Set<U>;
+    every(test: (value: T, index: number, set: Set<T>) => boolean): boolean;

     /**
      * Filter this set to create a subset of elements which satisfy a certain test criterion.
@@ -82,17 +82,25 @@
      * the index of iteration, and the set being filtered.
      * @returns {Set}  A new Set containing only elements which satisfy the test criterion.
      */
-    filter<U extends T = T>(test: (value: T) => value is U): Set<U>;
-    filter(test: (value: T) => boolean): Set<T>;
+    filter<U extends T = T>(test: (value: T, index: number, set: Set<T>) => value is U): Set<U>;
+    filter(test: (value: T, index: number, set: Set<T>) => boolean): Set<T>;

     /**
      * Find the first element in this set which satisfies a certain test criterion.
      * @see Array#find
      * @param test The test criterion to apply. Positional arguments are the value,
      * the index of iteration, and the set being searched.
-     * @returns  The first element in the set which satisfies the test criterion, or undefined.
+     * @returns The first element in the set which satisfies the test criterion, or undefined.
      */
-    find<U extends T = T>(test: (value: U) => boolean): T | undefined;
+    find<U extends T>(test: (value: T, index: number, obj: Set<T>) => value is U): U | undefined;
+    /**
+     * Find the first element in this set which satisfies a certain test criterion.
+     * @see Array#find
+     * @param test The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being searched.
+     * @returns  The first element in the set which satisfies the test criterion, or undefined.
+     */
+    find(test: (value: T, index: number, obj: Set<T>) => boolean): T | undefined;

     /**
      * Create a new Set where every element is modified by a provided transformation function.
@@ -101,7 +109,7 @@
      *                  and the set being transformed.
      * @returns A new Set of equal size containing transformed elements.
      */
-    map<U>(transfor: (value: T) => U): Set<U>;
+    map<U>(transform: (value: T, index: number, set: Set<T>) => U): Set<U>;

     /**
      * Create a new Set with elements that are filtered and transformed by a provided reducer function.
@@ -111,7 +119,17 @@
      * @param accumulator The initial value of the returned accumulator.
      * @returns The final value of the accumulator.
      */
-    reduce<U>(evaluator: (accumlator: U, value: T) => U, initial: U): U;
+    reduce<U>(reducer: (previousValue: U, currentValue: T, currentIndex: number, set: Set<T>) => U, accumulator: U): U;
+
+    /**
+     * Create a new Set with elements that are filtered and transformed by a provided reducer function.
+     * @see Array#reduce
+     * @param reducer A reducer function applied to each value. Positional
+     * arguments are the accumulator, the value, the index of iteration, and the set being reduced.
+     * @param accumulator The initial value of the returned accumulator.
+     * @returns The final value of the accumulator.
+     */
+    reduce(reducer: (previousValue: T, currentValue: T, currentIndex: number, set: Set<T>) => T, accumulator: T): T;

     /**
      * Test whether any element in this Set satisfies a certain test criterion.
@@ -120,5 +138,5 @@
      *             being tested.
      * @returns Does any element in the set satisfy the test criterion?
      */
-    some(test: (value: T) => boolean): boolean;
+    some(test: (value: T, index: number, set: Set<T>) => boolean): boolean;
 }
Index: types/foundry/common/utils/collection.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/types/foundry/common/utils/collection.d.ts b/types/foundry/common/utils/collection.d.ts
--- a/types/foundry/common/utils/collection.d.ts	(revision 274df0e694162065298f930be954f464e2376cbb)
+++ b/types/foundry/common/utils/collection.d.ts	(revision 3e52143c7cc1b18e5207339ddda461975953f2d5)
@@ -80,7 +80,7 @@
      * @param transformer  The transformation function to apply to each entry value
      * @return An Array of transformed values
      */
-    map<T>(transformer: (value: V) => T): T[];
+    map<T>(transformer: (value: V, index: number, collection: this) => T): T[];

     /**
      * Reduce the Collection by applying an evaluator function and accumulating entries
